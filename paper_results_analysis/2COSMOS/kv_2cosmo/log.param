#-----CLASS v2.9.0 (branch: master, hash: 75c9d34f35c03884c10575d45cfeaaab405ed5fc)-----

#------Experiments to test (separated with commas)-----

data.experiments=['kv450_bs_2cosmos_mark2_extended']

#------ Settings for the over-sampling. The first element will always be set to
# 1, for it is the sampling of the cosmological parameters. The other numbers
# describe the over sampling of the nuisance parameter space. This array must
# have the same dimension as the number of blocks in your run (so, 1 for
# cosmological parameters, and then 1 for each experiment with varying nuisance
# parameters).
#data.over_sampling=[1, 1, 4]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to -1
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo' or 'nuisance'

# Cosmological parameters list
# main parameters to extract:

data.parameters['omega_cdm_1']    = [0.11919,   0.01,    0.99,    0.0027,    1, 'cosmo1']
data.parameters['ln10^{10}A_s_1'] = [3.0753,    1.7,     5.,      0.0029,    1, 'cosmo1']
data.parameters['omega_b_1']      = [0.022253,  0.01875, 0.02625, 0.028,     1, 'cosmo1']
data.parameters['n_s_1']          = [0.96229,   0.7,     1.3 ,    0.0074,    1, 'cosmo1']
data.parameters['h_1']         	  = [0.673,     0.64,    0.82,    0.0065,    1, 'cosmo1']

data.parameters['omega_cdm_2']    = [0.11919,   0.01,    0.99,    0.0027,    1, 'cosmo2']
data.parameters['ln10^{10}A_s_2'] = [3.0753,    1.7,     5.,      0.0029,    1, 'cosmo2']
data.parameters['omega_b_2']      = [0.022253,  0.01875, 0.02625, 0.028,     1, 'cosmo2']
data.parameters['n_s_2']          = [0.96229,   0.7,     1.3,     0.0074,    1, 'cosmo2']
data.parameters['h_2']         	  = [0.673,     0.64,    0.82,    0.0065,    1, 'cosmo2']

# Nuisance parameters:

# amplitude for IA:
data.parameters['A_IA_1'] = [0.0, -6.0, 6.0, 1.0, 1, 'nuisance']
data.parameters['A_IA_2'] = [0.0, -6.0, 6.0, 1.0, 1, 'nuisance']

# parameters for baryon feedback with 'hmcode':
data.parameters['c_min_1'] = [3., 2., 3.13, 1., 1, 'cosmo1']
data.parameters['c_min_2'] = [3., 2., 3.13, 1., 1, 'cosmo2']
#data.parameters['eta_0_1'] = [0.7, 0.59, 0.81, 1., 1, 'cosmo1']
#data.parameters['eta_0_2'] = [0.7, 0.59, 0.81, 1., 1, 'cosmo2']

# amplitude for baryon feedback with 'halofit':
#data.parameters['A_bary_1'] = [0.75, 0.5, 1., 0.5, 1, 'nuisance']
#data.parameters['A_bary_2'] = [0.75, 0.5, 1., 0.5, 1, 'nuisance']

# nuisance parameters for c-correction:
data.parameters['dc_1'] = [0., -0.0006, 0.0006, 0.0002, 1, 'nuisance']
data.parameters['dc_2'] = [0., -0.0006, 0.0006, 0.0002, 1, 'nuisance']
data.parameters['Ac_1'] = [ 1.01, 0.62, 1.40, 0, 1, 'nuisance']
data.parameters['Ac_2'] = [ 1.01, 0.62, 1.40, 0, 1, 'nuisance']

### Delta-z parameters ###
#ZP:added into the mix
data.parameters['D_z1'] = [ 0., -0.117, 0.117, 0.01, 1, 'nuisance']
data.parameters['D_z2'] = [ 0., -0.069, 0.069, 0.01, 1, 'nuisance']
data.parameters['D_z3'] = [ 0., -0.078, 0.078, 0.01, 1, 'nuisance']
data.parameters['D_z4'] = [ 0., -0.036, 0.036, 0.01, 1, 'nuisance']
data.parameters['D_z5'] = [ 0., -0.033, 0.033, 0.01, 1, 'nuisance']
# Derived parameters
data.parameters['Omega_m_1']      = [1, None, None, 0, 1, 'derived']  
data.parameters['sigma8_1']       = [1, None, None, 0, 1, 'derived']  
data.parameters['Omega_m_2']      = [1, None, None, 0, 1, 'derived']  
data.parameters['sigma8_2']       = [1, None, None, 0, 1, 'derived']  

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

# fix main cosmology to Planck:
data.cosmo1_arguments['Omega_k'] = 0.
data.cosmo2_arguments['Omega_k'] = 0.

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that these
# three species contribute equally
# to the radiation density at large
# redshift, with a total of Neff=3.046
#data.cosmo_arguments['N_eff'] = 3.046
data.cosmo1_arguments['N_eff'] = 2.0328
data.cosmo1_arguments['N_ncdm'] = 1
data.cosmo1_arguments['m_ncdm'] = 0.06
data.cosmo1_arguments['T_ncdm'] = 0.71611
data.cosmo1_arguments['YHe'] = 0.24
data.cosmo2_arguments['YHe'] = 0.24
data.cosmo2_arguments['N_eff'] = 2.0328
data.cosmo2_arguments['N_ncdm'] = 1
data.cosmo2_arguments['m_ncdm'] = 0.06
data.cosmo2_arguments['T_ncdm'] = 0.71611

# standard BBN prediction of the primordial Helium abundance $Y_p$:

data.cosmo1_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo1_arguments['k_pivot'] = 0.05
data.cosmo2_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo2_arguments['k_pivot'] = 0.05

# only needed for regular MCMC:
data.write_step = 1


#-----Likelihood-kv450_bs_2cosmos_mark2_extended-----
kv450_bs_2cosmos_mark2_extended.theory_binning_const = 1.0
kv450_bs_2cosmos_mark2_extended.name_mask = 'all_vs_all'
kv450_bs_2cosmos_mark2_extended.cutvalues_file2 = 'cut_values_5zbins.txt'
kv450_bs_2cosmos_mark2_extended.cutvalues_file1 = 'cut_values_5zbins.txt'
kv450_bs_2cosmos_mark2_extended.use_nuisance = ['A_IA_1', 'dc_1', 'Ac_1', 'A_IA_2', 'dc_2', 'Ac_2', 'D_z1', 'D_z2', 'D_z3', 'D_z4', 'D_z5']
kv450_bs_2cosmos_mark2_extended.subtract_mask2_from_mask1 = False
kv450_bs_2cosmos_mark2_extended.dx_threshold = 0.4
kv450_bs_2cosmos_mark2_extended.read_weight_func_for_binning = False
kv450_bs_2cosmos_mark2_extended.mask_indices = [0, 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 264, 265, 266, 267, 268, 269]
kv450_bs_2cosmos_mark2_extended.use_cterm_function = True
kv450_bs_2cosmos_mark2_extended.use_linear_pk_for_IA = False
kv450_bs_2cosmos_mark2_extended.type_redshift_interp = 'linear'
kv450_bs_2cosmos_mark2_extended.integrate_Bessel_with = 'brute_force'
kv450_bs_2cosmos_mark2_extended.write_out_theory = False
kv450_bs_2cosmos_mark2_extended.gaussian_prior_name = ['dc_1', 'Ac_1', 'dc_2', 'Ac_2', 'D_z1', 'D_z2', 'D_z3', 'D_z4', 'D_z5']
kv450_bs_2cosmos_mark2_extended.data_directory = '/share/splinter/ug19_jrz/DATA/KV450_COSMIC_SHEAR_DATA_RELEASE/'
kv450_bs_2cosmos_mark2_extended.theory_weight_function_file = 'none'
kv450_bs_2cosmos_mark2_extended.use_joint_nuisance = False
kv450_bs_2cosmos_mark2_extended.theta_nodes_theory = 100
kv450_bs_2cosmos_mark2_extended.k_max_h_by_Mpc = 100.0
kv450_bs_2cosmos_mark2_extended.dx_below_threshold = 0.05
kv450_bs_2cosmos_mark2_extended.use_cut_theta = True
kv450_bs_2cosmos_mark2_extended.use_gaussian_prior_for_nuisance = True
kv450_bs_2cosmos_mark2_extended.dlntheta = 0.25
kv450_bs_2cosmos_mark2_extended.gaussian_prior_center = [0.0, 1.01, 0.0, 1.01]
kv450_bs_2cosmos_mark2_extended.use_theory_binning = True
kv450_bs_2cosmos_mark2_extended.method_non_linear_Pk = 'hmcode'
kv450_bs_2cosmos_mark2_extended.theta_bin_min_val = 0.5
kv450_bs_2cosmos_mark2_extended.theta_bin_max_val = 300.0
kv450_bs_2cosmos_mark2_extended.nz_method = 'DIR'
kv450_bs_2cosmos_mark2_extended.dlnl = 0.2
kv450_bs_2cosmos_mark2_extended.dx_above_threshold = 0.15
kv450_bs_2cosmos_mark2_extended.lmax = 60000
kv450_bs_2cosmos_mark2_extended.gaussian_prior_sigma = [0.0002, 0.13, 0.0002, 0.13]
kv450_bs_2cosmos_mark2_extended.xmax = 50.0
kv450_bs_2cosmos_mark2_extended.nzmax = 120


#-----------Cosmological-arguments1---------
data.cosmo1_arguments.update({'sBBN file': '/share/splinter/ug19_jrz/class_public/bbn/sBBN.dat', 'P_k_max_h/Mpc': 170.0, 'output': ' mPk ', 'z_max_pk': 5.9750000000000005, 'm_ncdm': 0.06, 'YHe': 0.24, 'Omega_k': 0.0, 'k_pivot': 0.05, 'non linear': ' hmcode ', 'N_ncdm': 1, 'T_ncdm': 0.71611, 'N_eff': 2.0328})


#-----------Cosmological-arguments2---------
data.cosmo2_arguments.update({'sBBN file': '/share/splinter/ug19_jrz/class_public/bbn/sBBN.dat', 'P_k_max_h/Mpc': 170.0, 'output': ' mPk ', 'z_max_pk': 5.9750000000000005, 'm_ncdm': 0.06, 'YHe': 0.24, 'Omega_k': 0.0, 'k_pivot': 0.05, 'non linear': ' hmcode ', 'N_ncdm': 1, 'T_ncdm': 0.71611, 'N_eff': 2.0328})


#--------Default-Configuration------
data.path['cosmo']	= '/share/splinter/ug19_jrz/class_public'
data.path['root']	= '/home/ug19_jrz/montepython2'
data.path['data']	= '/home/ug19_jrz/montepython2/data'
data.path['clik']	= '/share/splinter/ug19_jrz/planck/plc-2.0'
data.path['MontePython']	= '/home/ug19_jrz/montepython2/montepython'
